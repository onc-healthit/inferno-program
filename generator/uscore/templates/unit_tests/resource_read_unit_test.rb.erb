describe '<%= resource_type %> read test' do
  before do
    @<%= resource_var_name %>_id = '456'
    @test = @sequence_class[:<%= test_key %>]
    @sequence = @sequence_class.new(@instance, @client)
    <% if interaction_test %>@sequence.instance_variable_set(:'@resources_found', true)
      @sequence.instance_variable_set(:'@<%= resource_var_name %>', FHIR::<%= resource_type %>.new(id: @<%= resource_var_name %>_id))
    <% end %>
  end

  it 'skips if the <%= resource_type %> read interaction is not supported' do
    Inferno::Models::ServerCapabilities.create(
      testing_instance_id: @instance.id,
      capabilities: FHIR::CapabilityStatement.new.to_json
    )
    @instance.reload
    exception = assert_raises(Inferno::SkipException) { @sequence.run_test(@test) }

    skip_message = 'This server does not support <%= resource_type %> read operation(s) according to conformance statement.'
    assert_equal skip_message, exception.message
  end

  it 'skips if no <%= resource_type %> has been found' do
    <% if interaction_test %>@sequence.instance_variable_set(:'@resources_found', false)<% end %>
    exception = assert_raises(Inferno::SkipException) { @sequence.run_test(@test) }

    assert_equal '<%= no_resources_found_message %>', exception.message
  end

  it 'fails if a non-success response code is received' do
    Inferno::Models::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>_id,
      testing_instance: @instance
    )

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>_id}")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 401)

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert_equal 'Bad response code: expected 200, 201, but found 401. ', exception.message
  end

  it 'fails if no resource is received' do
    Inferno::Models::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>_id,
      testing_instance: @instance
    )

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>_id}")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200)

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert_equal 'Expected <%= resource_type %> resource to be present.', exception.message
  end

  it 'fails if the resource returned is not a <%= resource_type %>' do
    Inferno::Models::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>_id,
      testing_instance: @instance
    )

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>_id}")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: FHIR::<%= wrong_resource_type %>.new.to_json)

    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }

    assert_equal 'Expected resource to be of type <%= resource_type %>.', exception.message
  end

  it 'fails if the resource has an incorrect id' do
   Inferno::Models::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>_id,
      testing_instance: @instance
    )

   <%= resource_var_name %> = FHIR::<%= resource_type %>.new(
      id: 'wrong_id'
    )

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>_id}")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: <%= resource_var_name %>.to_json)
    exception = assert_raises(Inferno::AssertionException) { @sequence.run_test(@test) }
    assert_equal "Expected resource to contain id: #{@<%= resource_var_name %>_id}", exception.message
  end

  it 'succeeds when a <%= resource_type %> resource is read successfully' do
    <%= resource_var_name %> = FHIR::<%= resource_type %>.new(
      id: @<%= resource_var_name %>_id
    )
    Inferno::Models::ResourceReference.create(
      resource_type: '<%= resource_type %>',
      resource_id: @<%= resource_var_name %>_id,
      testing_instance: @instance
    )

    stub_request(:get, "#{@base_url}/<%= resource_type %>/#{@<%= resource_var_name %>_id}")
      .with(query: @query, headers: @auth_header)
      .to_return(status: 200, body: <%= resource_var_name %>.to_json)

    @sequence.run_test(@test)
  end
end
