# frozen_string_literal: true

require_relative './data_absent_reason_checker'

module Inferno
  module Sequence
    class <%=class_name%> < SequenceBase
      include Inferno::DataAbsentReasonChecker

      title '<%=title%>'

      description 'Verify that <%=resource%> resources on the FHIR server follow the US Core Implementation Guide'

      test_id_prefix '<%=test_id_prefix%>'

      requires :token<%=", :patient_ids" unless delayed_sequence%><%=', :device_codes' if resource == 'Device'  %>
      conformance_supports :<%=resource%><%="
      delayed_sequence" if delayed_sequence%>
<%=search_validator%>
      details %(
        The #{title} Sequence tests `#{title.gsub(/\s+/, '')}` resources associated with the provided patient.
      )

      def patient_ids
        @instance.patient_ids.split(',').map(&:strip)
      end

      @resources_found = false<% tests.each do |test|%>

<% if test[:key].present? %>
      test :<%= test[:key] %> do
<% else %>
      test '<%= test[:tests_that] %>' do
<% end %>
        metadata do
          id '<%=format('%02d', test[:index])%>'<% if test[:key].present? %>
          name '<%= test[:tests_that] %>'<% end %>
          link '<%=test[:link]%>'<%if test[:optional]%>
          optional<%end%>
          description %(
            <%=test[:description]%>
          )
          versions :r4
        end
<%=test[:test_code]%>
      end<% end%>
    end
  end
end
